import base64
import sys

def run_base64_encoded(encoded_code):
      
        decoded_bytes = base64.b64decode(encoded_code)
    
        code = decoded_bytes.decode('utf-8')
   
        exec(code, globals())


if __name__ == "__main__":
    encoded_script = ""
    run_base64_encoded(encoded_script)
